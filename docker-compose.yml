version: '3.6'

services:


  reverse-proxy:
      # The official v2 Traefik docker image
      image: traefik:v2.6
      container_name: traefik
      # Enables the web UI and tells Traefik to listen to docker
      command:
        - "--api.insecure=true"
        - "--providers.docker"
        - "--entryPoints.http.address=:80"
        - "--entryPoints.websecure.address=:443"
        - --log=true
        - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
        - --accessLog=true
        - --accessLog.filePath=/traefik.log
        # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
        - "--entrypoints.websecure.http.tls.certresolver=matrixresolver"
        - "--entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}"
        - "--entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}"
        - "--certificatesresolvers.matrixresolver.acme.dnschallenge=true"
        - "--certificatesresolvers.matrixresolver.acme.dnschallenge.provider=cloudflare"
        - "--certificatesResolvers.matrixresolver.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
        - "--certificatesResolvers.matrixresolver.acme.dnsChallenge.delayBeforeCheck=90" # To delay DNS check and reduce LE hitrate
        - "--certificatesresolvers.matrixresolver.acme.email=it@${DOMAIN}"
        - "--certificatesresolvers.matrixresolver.acme.storage=/acme.json"
      labels:
        # HTTP-to-HTTPS Redirect
        - "traefik.http.routers.http-catchall.entrypoints=http"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      networks:
        - bridge
        - proxy
      restart: always
      ports:
        # The HTTPS port
        - "443:443"
        # The Web UI (enabled by --api.insecure=true)
        - "8081:8080"
      environment:
        - CF_API_EMAIL=it@${DOMAIN}
        - CF_API_KEY=${CLOUDFLARE_API_KEY}
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
        - ./docker/traefik2/rules:/rules # file provider directory
        - ./docker/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
        - ./docker/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
        PUID: ${PUID}
        PGID: ${PGID}
        TZ: ${TZ}
    volumes:
      - ./docker/heimdall:/config
    networks:
      - proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.dash.loadbalancer.server.port=80"
      - "traefik.http.routers.dash.rule=Host(`dash.${DOMAIN}`)"
      - "traefik.http.routers.dash.entrypoints=websecure"
      - "traefik.http.routers.dash.tls.certresolver=matrixresolver"


  uptime:
      image: louislam/uptime-kuma
      container_name: uptimekuma
      environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
      volumes:
        - ./docker/uptimekuma:/app/data
      networks:
        - proxy
      security_opt:
        - no-new-privileges:true
      restart: unless-stopped
      labels:
      - "traefik.enable=true"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"
      - "traefik.http.routers.uptime.rule=Host(`uptime.${DOMAIN}`)"
      - "traefik.http.routers.uptime.entrypoints=websecure"
      - "traefik.http.routers.uptime.tls.certresolver=matrixresolver"

  singalcli:
    image: bbernhard/signal-cli-rest-api:latest
    container_name: signalcli
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - MODE=normal #supported modes: json-rpc, native, normal
      #- AUTO_RECEIVE_SCHEDULE=0 22 * * * #enable this parameter on demand (see description below)
    volumes:
      - "./docker/signal-cli-config:/home/.local/share/signal-cli" #map "signal-cli-config" folder on host system into docker container. the folder contains the password and cryptographic keys when a new number is registered
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.signal.loadbalancer.server.port=8080"
      - "traefik.http.routers.signal.rule=Host(`signal.${DOMAIN}`)"
      - "traefik.http.routers.signal.entrypoints=websecure"
      - "traefik.http.routers.signal.tls.certresolver=matrixresolver"


  snipe-mysql:
    container_name: snipe-mysql
    image: mysql:5.6
    networks:
      - snipeit-backend
    env_file:
      - ./.env
    volumes:
      - ./docker/snipesql-vol:/var/lib/mysql
#      - db:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    expose:
      - "3306"


  snipe-it:
    image: lscr.io/linuxserver/snipe-it:latest
    restart: unless-stopped
    container_name: snipeit
    networks:
      - snipeit-backend
      - proxy
    volumes:
      - ./docker/logs:/var/www/html/storage/logs
      - ./docker/snipeit:/config
      - ./trustedproxy.php:/app/www/vendor/fideloper/proxy/config/trustedproxy.php
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - APP_URL=https://snipeit.matrixplastic.com
      - NGINX_APP_URL=snipeit.matrixplastic.com
      - MYSQL_PORT_3306_TCP_ADDR=snipe-mysql
      - MYSQL_PORT_3306_TCP_PORT=3306
      - MYSQL_DATABASE=snipeit
      - MYSQL_USER=snipeit
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - APP_ENV=production #optional
      - APP_TRUSTED_PROXIES=${APP_TRUSTED_PROXIES}
      - APP_FORCE_TLS=true
    env_file:
      - ./.env
    depends_on:
      - snipe-mysql
    labels:
      - "traefik.enable=true"
     # - "traefik.http.services.snipeit.loadbalancer.server.port=80"
      - "traefik.http.routers.snipeit.rule=Host(`snipeit.${DOMAIN}`)"
      - "traefik.http.routers.snipeit.entrypoints=websecure"

networks:
  bridge:
    driver: bridge
  proxy:
    driver: bridge
  snipeit-backend: {}
